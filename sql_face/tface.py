# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_tface.ipynb.

# %% auto 0
__all__ = ['get_network', 'compute_tf_quality']

# %% ../nbs/06_tface.ipynb 3
import numpy as np
import torch

from tface.utils import network, preprocess_tf_img

# %% ../nbs/06_tface.ipynb 4
def get_network():

    if torch.cuda.is_available():
        device = 'cuda:0'
        net = network(device=device)
    elif not torch.cuda.is_available():
        device = 'cpu'
        net = network( device=device)        
    else:
        raise ValueError(f'Value {torch.cuda.is_available()} is not correct')

    return net


# %% ../nbs/06_tface.ipynb 5
def compute_tf_quality(aligned_img:np.array, network)->float:
    
    net = network

    if torch.cuda.is_available():
        
        input_data = preprocess_tf_img(aligned_img).to('cuda:0')
        pred_score = net(input_data).data.cuda().numpy().squeeze()     
        
    elif not torch.cuda.is_available():
        
        input_data = preprocess_tf_img(aligned_img)
        pred_score = net(input_data).data.cpu().numpy().squeeze()
           
    else:
        raise ValueError(f'Value {torch.cuda.is_available()} is not correct')

    return pred_score


